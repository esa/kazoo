#!/bin/bash -e

# This script will build your system
# DO NOT EDIT THIS FILE
# Generated by TASTE on @_Now_@

# If you need additional pre-processing, there are three hook files
# that you can provide and that are called dring the build:
# user_init_pre.sh, user_init_post.sh and user_init_last.sh
# These files will never get overwritten by TASTE.
# Inside these files you may set some environment variables:
#    C_INCLUDE_PATH=/usr/include/xenomai/analogy/:${C_INCLUDE_PATH}
#    unset USE_POHIC

CWD=$(pwd)

if [ -t 1 ] ; then
    COLORON="\e[1m\e[32m"
    COLOROFF="\e[0m"
else
    COLORON=""
    COLOROFF=""
fi

INFO="${COLORON}[INFO]${COLOROFF}"

if [ -f user_init_pre.sh ]
then
    echo -e "${INFO} Executing user-defined init script"
    source user_init_pre.sh
fi

# By default, use PolyORB-HI-C runtime
USE_POHIC=1

# Set Debug mode by default
DEBUG_MODE=--debug

INTERFACEVIEW=@_Interface_View_Path_@

# Output path were the user code was generated
SKELS=@_Output_Path_@

@@TABLE@@
@_Generate_Code_@
@@END_TABLE@@

@@TABLE@@
@_Zip_Code_@
@@END_TABLE@@

if [ -f ConcurrencyView.pro ]
then
    ORCHESTRATOR_OPTIONS+=" -w ConcurrencyView.pro "
elif [ -f ConcurrencyView_Properties.aadl ]
then
    ORCHESTRATOR_OPTIONS+=" -w ConcurrencyView_Properties.aadl "
fi

if [ -f user_init_post.sh ]
then
    echo -e "${INFO} Executing user-defined post-init script"
    source user_init_post.sh
fi

if [ -f additionalCommands.sh ]
then
    source additionalCommands.sh
fi

if [ ! -z "$USE_POHIC" ]
then
    OUTPUTDIR=binary.c
    ORCHESTRATOR_OPTIONS+=" --with-polyorb-hi-c "
else
    OUTPUTDIR=binary.ada
fi

cd "$CWD" && \
assert-builder-ocarina.py \
   --fast      \
   --aadlv2    \
   --keep-case \
   $DEBUG_MODE \
   --interfaceView  "$INTERFACEVIEW"   \
   --deploymentView "$DEPLOYMENTVIEW"  \
   -o "$OUTPUTDIR" \
@@TABLE@@
   @_REPLACE((\n)/):Functions_@
@@END_TABLE@@
   @_CodeCoverage_@ \
    $ORCHESTRATOR_OPTIONS

if [ -f user_init_last.sh ]
then
    echo -e "${INFO} Executing user-defined post-build script"
    source user_init_last.sh
fi
# End of build script
