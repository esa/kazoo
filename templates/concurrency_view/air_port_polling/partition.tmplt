@@-- The following tags are available in this template:
@@--
@@-- @_Name_@            : Partition name (usually the name of the binary)
@@-- @_Threads_@         : Code generated for the threads
@@-- @_Thread_Names_@    : Tag: list of thread names
@@-- @_Node_Name_@       : Name of the node containing this partition
@@-- @_Blocks_@          : Code generated for protected functions
@@-- @_Block_Names@      : Vector Tag: list of block (user functions) names
@@-- @_Block_Languages@  :   |_ Corresponding implementation language
@@-- @_Coverage_@        : True if user requested code coverage enable
@@-- @_Package_Name_@    : AADL Package name for the target (e.g. ocarina_porocessors_x86)
@@-- @_CPU_Name_@        : CPU Name (e.g. x86_linux)
@@-- @_CPU_Platform_@    : AADL CPU_Platform (e.g. PLATFORM_NATIVE)
@@-- @_CPU_Classifier_@  : AADL CPU Classifier (e.g. ocarina_processors_x86::x86.linux)
@@-- @_VP_Name_@         : Virtual processor name on which the partition is bounded
@@-- @_VP_Platform_@     : Virtual processor platform (e.g. PLATFORM_AIR)
@@-- @_VP_Classifier_@   : Virtual processor classifier
@@-- @_Ada_Runtime_@     : Set if CPU_Platform = PLATFORM_GNAT_RUNTIME
@@-- @_Bound_Functions_@ : List of user functions from Interface view
@@-- @_Thread_Src_Name_@ : Vector tag : connection thread name (source)
@@-- @_Thread_Dst_Name_@ : Vector tag : connection thread name (dest)
@@-- @_Thread_Src_Port_@ : Vector tag : connection port name (source)
@@-- @_Thread_Dst_Port_@ : Vector tag : connection port name (dest)
@@IF@@ @_VP_Platform_@ = PLATFORM_AIR
/* This file was generated by TASTE to support the AIR to POHIC Ports mapping,
   allowing inter-partition communication.
*/
#include <stdio.h>

#include <po_hi_debug.h>
#include <po_hi_types.h>
#include <po_hi_transport.h>
#include <po_hi_gqueue.h>

#include <deployment.h>
#include <request.h>
#include <activity.h>

#include <air.h>
#include <a653.h>
#include <stdio.h>   // for debug purposes

void user_ports_polling ()
{
   __po_hi_port_t portno;
   __po_hi_node_t mynode;
   __po_hi_node_t tmpnode;
   __po_hi_request_t request;
   __po_hi_port_kind_t pkind;
   static int debug_counter = 0;

   RETURN_CODE_TYPE rc;
   SAMPLING_PORT_CURRENT_STATUS_TYPE STATUS;
   MESSAGE_SIZE_TYPE len;
   PARTITION_ID_TYPE self_id;

   debug_counter = debug_counter + 1;

   if (10 == debug_counter) {
       printf("Polling ports for partition \n");
       debug_counter = 0;
   }

   mynode = __po_hi_transport_get_mynode ();

   for (portno = 0 ; portno < __PO_HI_NB_PORTS ; portno++) {
      pkind = __po_hi_transport_get_port_kind (portno);
      tmpnode = __po_hi_transport_get_node_from_entity
        (__po_hi_get_entity_from_global_port (portno));

      if (tmpnode == mynode) {
         printf ("Testing port %d\n",
                    __po_hi_transport_air_get_port (portno));

         if (pkind ==  __PO_HI_IN_EVENT_DATA_INTER_PROCESS) {
           printf("Receiving message from the other partition!!!!\n");
           RECEIVE_QUEUING_MESSAGE
             (__po_hi_transport_air_get_port (portno),
              INFINITE_TIME_VALUE,
              &request,
              &len,
              &rc);

           if (rc == NO_ERROR) {
            printf("There was no error: DELIVERING \n");
            __po_hi_main_deliver (&request);
           }
         }
      }
   }
}
@@ELSE@@
/* This is not an AIR partition, nothing is needed here */
@@END_IF@@
