@@-- The following tags are available in this template:
@@--
@@-- @_Name_@            : Partition name (usually the name of the binary)
@@-- @_Threads_@         : Code generated for the threads
@@-- @_Thread_Names_@    : Tag: list of thread names
@@-- @_Node_Name_@       : Name of the node containing this partition
@@-- @_Blocks_@          : Code generated for protected functions
@@-- @_Block_Names@      : Vector Tag: list of block (user functions) names
@@-- @_Block_Languages_@ :   |_ Corresponding implementation language
@@-- @_Block_Instance_Of_@:  |_ Name of parent function (if instance)
@@-- @_Coverage_@        : True if user requested code coverage enable
@@-- @_Package_Name_@    : AADL Package name for the target (e.g. ocarina_porocessors_x86)
@@-- @_CPU_Name_@        : CPU Name (e.g. x86_linux)
@@-- @_CPU_Platform_@    : AADL CPU_Platform (e.g. PLATFORM_NATIVE)
@@-- @_CPU_Classifier_@  : AADL CPU Classifier (e.g. ocarina_processors_x86::x86.linux)
@@-- @_CPU_Family_@      : e.g. gr740 or x86
@@-- @_CPU_Instance_@    : e.g. rtems51_posix or linux
@@-- @_VP_Name_@         : Virtual processor name on which the partition is bounded
@@-- @_VP_Platform_@     : Virtual processor platform (e.g. PLATFORM_AIR)
@@-- @_VP_Classifier_@   : Virtual processor classifier
@@-- @_Ada_Runtime_@     : Set if CPU_Platform = PLATFORM_GNAT_RUNTIME
@@-- @_Bound_Functions_@ : List of user functions from Interface view
@@-- @_Thread_Src_Name_@ : Vector tag : connection thread name (source)
@@-- @_Thread_Dst_Name_@ : Vector tag : connection thread name (dest)
@@-- @_Thread_Src_Port_@ : Vector tag : connection port name (source)
@@-- @_Thread_Dst_Port_@ : Vector tag : connection port name (dest)
@@-- @_In_Port_Names_@        : Vector tag: input ports of the partition
@@-- @_In_Port_Thread_Name_@  :     |_ corresponding thread inside the partition
@@-- @_In_Port_Type_Name_@    :     |_ corresponding parameter type name (optional)
@@-- @_Out_Port_Names_@       : Vector tag: output ports of the partition
@@-- @_Out_Port_Thread_Name_@ :     |_ corresponding thread inside the partition
@@-- @_Out_Port_Type_Name_@   :     |_ corresponding parameter type name (optional)
#include "transport.h"

#include <msp430.h>
#include <string.h>

// use header genrated by ocarina for port identyfication
#include <deployment.h>

#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"

@@IF@@ @_In_Port_Names_@ /= "" OR @_Out_Port_Names_@ /= ""
__attribute__ ((persistent)) static RemoteTransportFuncPtr remote_transport_func = NULL;
void register_remote_transport_func(RemoteTransportFuncPtr fn)
{
    remote_transport_func = fn;
}

@@TABLE@@
extern QueueHandle_t @_In_Port_Thread_Name_@_Global_Queue;
@@END_TABLE@@

void process_incomming_message(struct Message* msg)
{
    struct Request request;
    if(msg->m_length > 0)
    {
        memcpy(request.m_data, msg->m_data, msg->m_length);
        request.m_length = msg->m_length;
    }
    else
    {
        request.m_length = 0;
    }

    switch(msg->m_port)
    {
@@TABLE@@
        case @_LOWER:In_Port_Thread_Name_@_global_inport_@_LOWER:In_Port_Names_@:
            xQueueSend(@_In_Port_Thread_Name_@_Global_Queue,
                       &request,
                       0);

            break;
@@END_TABLE@@
    }
}

@@END_IF@@

@@TABLE@@
void deliver_to_@_Out_Port_Remote_Function_@_@_Out_Port_Remote_Port_Name_@(struct Request* task)
{
    if(remote_transport_func != NULL)
    {
        remote_transport_func(task->m_data,
                              task->m_length,
                              (uint32_t) @_LOWER:Out_Port_Remote_Function_@_@_LOWER:Out_Port_Remote_Port_Name_@_global_inport_@_LOWER:Out_Port_Remote_Port_Name_@);
    }
}
@@END_TABLE@@

@@TABLE@@
void deliver_to_@_Thread_Names_@(struct Request* task)
{
    extern QueueHandle_t @_Thread_Names_@_Global_Queue;
	xQueueSend(@_Thread_Names_@_Global_Queue,
	           task,
			   0);

}
@@END_TABLE@@
