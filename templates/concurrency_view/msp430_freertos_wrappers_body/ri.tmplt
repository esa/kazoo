@@-- The following tags are available in this template:
@@--
@@-- @_Name_@                   : The name of the interface
@@-- @_Direction_@              : "PI" or "RI"
@@-- @_Kind_@                   : The RCM Kind
@@-- @_Parent_Function_@        : The name of the function
@@-- @_Language_@               : The implementation language of the function
@@-- @_Partition_Name_@         : Partition name for parent function
@@-- @_Param_Names_@            : List of parameter names
@@-- @_Param_Types_@            :   |_ Corresponding parameter types
@@-- @_Param_Directions_@       :   |_ Corresponding direction
@@-- @_Remote_Function_Names_@  : List of callees
@@-- @_Remote_Interface_Names_@ :   |_ callee's interface name
@@-- @_Remote_Languages_@       :   |_ callee's function language
@@-- @_Calling_Threads_@        : Calling threads of the containing block
// Required interface @_Name_@ in function @_Parent_Function_@
@@IF@@ @_Param_Names'Length_@ = 0
   @@SET@@ No_Param=True
@@END_IF@@
@@INLINE@@  @@-- Include the relevant header file to call synchronous RIs
   @@IF@@ @_Kind_@ = PROTECTED_OPERATION or @_Kind_@ = UNPROTECTED_OPERATION
      @@TABLE@@
          @@IF@@ @_Remote_Languages_@ = Blackbox_C
              #include "@_LOWER:Remote_Function_Names_@.h"
@@--          @@ELSIF@@ @_Remote_Languages_@ = SIMULINK
@@--              #include "@_Name_@_SIMULINK.Simulink.h"
          @@ELSE@@  @@-- Now a vm_if function is wrapping the DMT-generated one
              #include "@_LOWER:Remote_Function_Names_@_vm_if.h"  // Remote language: @_Remote_Languages_@
          @@END_IF@@
      @@END_TABLE@@
   @@END_IF@@
@@END_INLINE@@
@@IF@@ @_No_Param_@
void vm_@_LOWER:Parent_Function_@_@_LOWER:Name_@(void)
@@ELSE@@
void vm_@_LOWER:Parent_Function_@_@_LOWER:Name_@
@@INLINE(        \()(,\n         )(\)\n)@@
   @@TABLE@@
      @@IF@@ @_Param_Directions_@ = "PARAM_IN"
         const char *IN_buf_@_LOWER:Param_Names_@, size_t size_IN_buf_@_LOWER:Param_Names_@
      @@ELSE@@
         char *OUT_buf_@_LOWER:Param_Names_@, size_t *size_OUT_buf_@_LOWER:Param_Names_@
      @@END_IF@@
   @@END_TABLE@@
@@END_INLINE@@
@@END_IF@@
{
@@IF@@ @_Kind_@ = SPORADIC_OPERATION
	struct Request request;
	if(size_IN_buf_@_LOWER:Param_Names_@ != 0)
	{
		request.m_length = size_IN_buf_@_LOWER:Param_Names_@;
		memcpy(request.m_data, IN_buf_@_LOWER:Param_Names_@, size_IN_buf_@_LOWER:Param_Names_@);
	}
	else
	{
		request.m_length = 0;
	}
    deliver_to_@_Remote_Function_Names_@_@_Remote_Interface_Names_@(&request);
@@ELSIF@@ @_Kind_@ = UNPROTECTED_OPERATION
   // Unprotected call (call function defined in vm_if or SIMULINK.Simulink.c function)
@@TABLE@@
@@IF@@ @_No_Param_@
   @_LOWER:Remote_Function_Names_@_@_Remote_Interface_Names_@();
@@ELSE@@
   @_LOWER:Remote_Function_Names_@_@_Remote_Interface_Names_@
@@INLINE(        \()(,\n         )(\);\n)@@
   @@IF@@ @_Remote_Languages_@ = SIMULINK  @@-- Simulink interfaces use void* instead of const char */char*
       @@TABLE@@
          @@IF@@ @_Param_Directions_@ = "PARAM_IN"
             (void *)IN_buf_@_LOWER:Param_Names_@, size_IN_buf_@_LOWER:Param_Names_@
          @@ELSE@@
             (void *)OUT_buf_@_LOWER:Param_Names_@, size_OUT_buf_@_LOWER:Param_Names_@
          @@END_IF@@
       @@END_TABLE@@
   @@ELSE@@
       @@TABLE@@
          @@IF@@ @_Param_Directions_@ = "PARAM_IN"
             IN_buf_@_LOWER:Param_Names_@, size_IN_buf_@_LOWER:Param_Names_@
          @@ELSE@@
             OUT_buf_@_LOWER:Param_Names_@, size_OUT_buf_@_LOWER:Param_Names_@
          @@END_IF@@
       @@END_TABLE@@
   @@END_IF@@
@@END_INLINE@@
@@END_IF@@
@@END_TABLE@@
@@ELSE@@ @@-- Protected call
   // puts("[TASTE] Protected call of @_Name_@");
@@TABLE@@
@@IF@@ @_No_Param_@
   pro_@_Remote_Function_Names_@_@_Remote_Interface_Names_@();
@@ELSE@@
   pro_@_Remote_Function_Names_@_@_Remote_Interface_Names_@
@@INLINE(        \()(,\n         )(\);\n)@@
   @@IF@@ @_Remote_Languages_@ = SIMULINK  @@-- Simulink interfaces use void* instead of const char */char*
       @@TABLE@@
          @@IF@@ @_Param_Directions_@ = "PARAM_IN"
             (void *)IN_buf_@_LOWER:Param_Names_@, size_IN_buf_@_LOWER:Param_Names_@
          @@ELSE@@
             (void *)OUT_buf_@_LOWER:Param_Names_@, size_OUT_buf_@_LOWER:Param_Names_@
          @@END_IF@@
       @@END_TABLE@@
   @@ELSE@@
       @@TABLE@@
          @@IF@@ @_Param_Directions_@ = "PARAM_IN"
             IN_buf_@_LOWER:Param_Names_@, size_IN_buf_@_LOWER:Param_Names_@
          @@ELSE@@
             OUT_buf_@_LOWER:Param_Names_@, size_OUT_buf_@_LOWER:Param_Names_@
          @@END_IF@@
       @@END_TABLE@@
   @@END_IF@@
@@END_INLINE@@
@@END_IF@@
@@END_TABLE@@
@@END_IF@@
}
