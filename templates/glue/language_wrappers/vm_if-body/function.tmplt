@@-- The following tags are available in this template:
@@--
@@-- @_Name_@                : The name of the function
@@-- @_Language_@            : The implementation language
@@-- @_List_Of_PIs_@         : List of all Provided Interfaces (just names)
@@-- @_List_Of_RIs_@         : List of all Required Interfaces (just names)
@@-- @_List_Of_Sync_PIs@     : List of synchronous Provided Interfaces
@@-- @_List_Of_Sync_RIs@     : List of synchronous Required Interfaces
@@-- @_Sync_RIs_Parent@      : ... and corresponding Parent function name
@@-- @_List_Of_ASync_PIs@    : List of asynchronous Provided Interfaces
@@-- @_List_Of_ASync_RIs@    : List of asynchronous Required Interfaces
@@-- @_Async_RIs_Parent@     : ... and corresponding Parent function name
@@-- @_ASN1_Modules_@        : List of ASN.1 Modules names
@@-- @_ASN1_Files_@          : List of ASN.1 Files with path
@@-- @_Timers_@              : List of timers (just names)
@@-- @_Has_Context_@         : Flag, True if there are context parameters
@@-- @_CP_Names_@            : List of Context Parameter names
@@-- @_CP_Types_@            : List of Context Parameter types
@@-- @_Provided_Interfaces_@ : From template: Provided interfaces with params
@@-- @_Required_Interfaces_@ : From template: Required interfaces with params
@@-- @_Property_Names_@      : List of User-defined properties (names)
@@-- @_Property_Values_@     : List of User-defined properties (values)
@@-- @_Is_Type_@             : Flag, True if function is a component type
@@-- @_Instance_Of_@         : Optional name of component type
/* Body file for function @_Name_@
 * Generated by TASTE on @_NOW_@
 * You can edit this file, it will not be overwritten
 * Provided interfaces : @_List_Of_PIs_@
 * Required interfaces : @_List_Of_RIs_@
 * User-defined properties for this function:
@@TABLE@@
 *   |_ @_Property_Names_@ = @_Property_Values_@
@@END_TABLE@@
 * Timers              : @_Timers_@
 */

#include "@_LOWER:Name_@_vm_if.h"

void init_@_LOWER:Name_@()
{
   static bool init = false;

   if (!init) {
      init = true;

@@IF@@ @_Language_@ /= "Ada" and @_Language_@ /= "QGenAda" and @_Language_@ /= "QGenC" and @_Language_@ /= "SDL"
      // Call user code startup function
      @_LOWER:Name_@_startup();
@@END_IF@@
@@IF@@ @_EXIST:Sync_RIs_Parent_@
      // Iterate over all synchronous RIs, and call their parent's
      // init function. Multiple calls are prevented by the "init" guard.
@@END_IF@@
@@TABLE@@
      init_@_LOWER:Sync_RIs_Parent_@();
@@END_TABLE@@
   }
}
@@-- For blackbox devices, don't generate the PI functions, they will be
@@-- generated as skeleton functions. The init function only must be there.
@@IF@@ @_Language_@ /= "Blackbox_C"
@@TABLE@@
@_Provided_Interfaces_@
@@END_TABLE@@
@@END_IF@@
