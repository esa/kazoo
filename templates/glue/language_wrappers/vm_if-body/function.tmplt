@@-- The documentation of the templates is there:
@@-- https://taste.tuxfamily.org/wiki/index.php?title=Kazoo_Templates_Documentation
@@-- If you are using vim, go over the URL and pres gx in to follow the link
@@-- If you have no internet access you can also use (with vim) Ctrl-W-f or gf in vim to open the text doc:
@@-- $HOME/tool-inst/share/kazoo/doc/templates_skeletons_sub_function.ascii
/* Body file for function @_Name_@
 * Generated by TASTE on @_NOW_@
 * Provided interfaces : @_List_Of_PIs_@
 * Required interfaces : @_List_Of_RIs_@
 * User-defined properties for this function:
@@TABLE@@
 *   |_ @_Property_Names_@ = @_Property_Values_@
@@END_TABLE@@
 * Timers              : @_Timers_@
 */
#include "@_LOWER:Name_@_vm_if.h"
@@IF@@ @_PIs_Have_Params_@
#include "C_ASN1_Types.h"
@@END_IF@@
#ifdef __unix__
   #include <stdio.h>
#endif

@@SET@@ SDL_Target_Language=""

@@IF@@ @_Language_@ = Ada
@@SET@@ SDL_Target_Language="Ada"
@@ELSIF@@ @_Language_@ = SDL
@@SET@@ SDL_Target_Language="Ada"
@@TABLE@@
@@IF@@ @_Property_Names_@ = "TASTE_IV_Properties::Default_CodeGen" and @_Property_Values_@ = ada
@@SET@@ SDL_Target_Language="Ada"
@@ELSIF@@ @_Property_Names_@ = "TASTE_IV_Properties::Default_CodeGen" and @_Property_Values_@ = c
@@SET@@ SDL_Target_Language="C"
@@END_IF@@
@@END_TABLE@@
@@END_IF@@

@@IF@@ @_SDL_Target_Language_@ = "Ada"
extern void adainit(void);
@@ELSIF@@ @_SDL_Target_Language_@ = "C"
extern void CInit@_CAPITALIZE:Name_@(void);
@@END_IF@@

@@TABLE@@
extern void init_@_LOWER:Sync_RIs_Parent_@(void);
extern unsigned @_LOWER:Sync_RIs_Parent_@_initialized;
@@IF@@ not @_Use_POHIC_@
#include "@_LOWER:Sync_RIs_Parent_@_vm_if.h"
@@END_IF@@
@@END_TABLE@@
unsigned @_LOWER:Name_@_initialized = 0;
void init_@_LOWER:Name_@(void)
{
   if (0 == @_LOWER:Name_@_initialized) {
      @_LOWER:Name_@_initialized = 1;
@@IF@@ @_Language_@ /= "Ada" and @_Language_@ /= "QGenAda" and @_Language_@ /= "QGenC" and @_Language_@ /= "SDL"
      // Call user code startup function
      extern void @_LOWER:Name_@_startup(void);
      @_LOWER:Name_@_startup();
@@ELSIF@@ @_Language_@ = Ada or @_Language_@ = SDL
@@IF@@ @_SDL_Target_Language_@ = "Ada"
      // Initialize Ada runtime to call elaboration functions
      adainit();
@@ELSIF@@ @_SDL_Target_Language_@ = "C"
      // Initialize C to call elaboration functions
      CInit@_CAPITALIZE:Name_@();
@@END_IF@@
@@END_IF@@
@@IF@@ @_EXIST:Sync_RIs_Parent_@
      // Iterate over all synchronous RIs, and call their parent's
      // init function. Multiple calls are prevented by the "init" guard.
@@END_IF@@
@@TABLE@@
      if (0 == @_LOWER:Sync_RIs_Parent_@_initialized) {
          init_@_LOWER:Sync_RIs_Parent_@();
      }
@@END_TABLE@@
#ifdef __unix__
      puts ("[TASTE] Initialization completed for function @_Name_@");
#endif
      @@-- Value is set to 2 only once the function is fully initialized
      @@-- This was used to prevent RI calls during startup, but this
      @@-- is not needed anymore at runtime since this is now allowed
      @_LOWER:Name_@_initialized = 2;
   }
}
@@-- For blackbox devices, don't generate the PI functions, they will be
@@-- generated as skeleton functions. The init function only must be there.
@@IF@@ @_Language_@ /= "Blackbox_C"
@_Provided_Interfaces_@
@@END_IF@@
