@@-- The following tags are available in this template:
@@--
@@-- @_Name_@                : The name of the interface
@@-- @_Direction_@           : "PI" or "RI"
@@-- @_Kind_@                : The RCM Kind
@@-- @_Parent_Function_@     : The name of the function
@@-- @_Language_@            : The implementation language of the function
@@-- @_Property_Names_@      : All AADL properties (names) associated to the function
@@-- @_Property_Values_@     : ... and corresponding values
@@-- @_Param_Names_@         : List of parameter names
@@-- @_Param_Types_@         :   |_ Corresponding parameter types
@@-- @_Param_Directions_@    :   |_ Corresponding direction
@@-- @_Param_Encodings_@     :   |_ Corresponding encoding (Default, Native, UPER, ACN)
@@IF@@ @_Kind_@ /= UNPROTECTED_OPERATION
   @@SET@@ Static="static "  @@-- Parameters of unprotected operations must be on the stack to avoid race conditions
@@END_IF@@
@@IF@@ @_EXIST:Param_Names_@
void @_LOWER:Parent_Function_@_@_Name_@
@@INLINE(      \()(,\n       )(\)\n)@@
   @@TABLE@@
      @@IF@@ @_Param_Directions_@ = "PARAM_IN"
         const char *IN_@_LOWER:Param_Names_@, size_t IN_@_LOWER:Param_Names_@_len
     @@ELSE@@
         char *OUT_@_LOWER:Param_Names_@, size_t *OUT_@_LOWER:Param_Names_@_len
     @@END_IF@@
   @@END_TABLE@@
@@END_INLINE@@
{

@@TABLE@@    @@-- decode input/output parameters into static variables or stack in case of unprotected operations
@@IF@@ @_Param_Directions_@ = "PARAM_IN"
   @_Static_@asn1Scc@_REPLACE_ALL(-/_):Param_Types_@ IN_@_UPPER:Param_Names_@;
@@ELSE@@
   @_Static_@asn1Scc@_REPLACE_ALL(-/_):Param_Types_@ OUT_@_UPPER:Param_Names_@;
@@END_IF@@
#ifdef __unix__
@@IF@@ @_Param_Directions_@ = "PARAM_IN"
   asn1Scc@_REPLACE_ALL(-/_):Param_Types_@_Initialize(&IN_@_UPPER:Param_Names_@);
@@ELSE@@
   asn1Scc@_REPLACE_ALL(-/_):Param_Types_@_Initialize(&OUT_@_UPPER:Param_Names_@);
@@END_IF@@
#endif
@@IF@@ @_Param_Directions_@ = "PARAM_IN"
   if (0 != Decode_@_Param_Encodings_@_@_REPLACE_ALL(-/_):Param_Types_@ (&IN_@_UPPER:Param_Names_@, (void *)IN_@_LOWER:Param_Names_@, IN_@_LOWER:Param_Names_@_len)) {
      #ifdef __unix__
         puts("Error decoding @_Param_Types_@ in function @_Parent_Function_@_@_Name_@");
      #endif
      return;
   }
@@END_IF@@
@@END_TABLE@@

   //  Declare user code function as external (it may not have a .h if it is in Ada)
   extern void @_LOWER:Parent_Function_@_PI_@_Name_@
@@INLINE(      \()(,\n       )(\);\n)@@
   @@TABLE@@
      @@IF@@ @_Param_Directions_@ = "PARAM_IN"
         const asn1Scc@_REPLACE_ALL(-/_):Param_Types_@ *
     @@ELSE@@
         asn1Scc@_REPLACE_ALL(-/_):Param_Types_@ *
     @@END_IF@@
   @@END_TABLE@@
@@END_INLINE@@

@@-- determine if we need FPGA dispatching
@@TABLE@@
    @@IF@@ @_LOWER:Property_Names_@ = taste_iv_properties::fpga_configurations and @_Property_Values_@ /= ""
       @@SET@@ Dispatch_FPGA=TRUE 
    @@END_IF@@
@@END_TABLE@@
@@--
@@MACRO(PARAMETERS)@@
   @@INLINE(, )@@
      @@TABLE@@
         @@IF@@ @_Param_Directions_@ = "PARAM_IN"
            &IN_@_UPPER:Param_Names_@
         @@ELSE@@
            &OUT_@_UPPER:Param_Names_@
         @@END_IF@@
      @@END_TABLE@@
   @@END_INLINE@@
@@END_MACRO@@
@@--
   // Call user code
@@IF@@ @_Dispatch_FPGA_@
   if(0 != @_LOWER:Parent_Function_@_@_Name_@_FPGA_Dispatch(@_STRIP:PARAMETERS(@_Param_Directions_@, @_Param_Names_@)_@))
      @_LOWER:Parent_Function_@_PI_@_Name_@ (@_STRIP:PARAMETERS(@_Param_Directions_@, @_Param_Names_@)_@);
@@ELSE@@
   @_LOWER:Parent_Function_@_PI_@_Name_@ (@_STRIP:PARAMETERS(@_Param_Directions_@, @_Param_Names_@)_@);
@@END_IF@@

@@TABLE@@    @@-- encode output parameters
@@IF@@ @_Param_Directions_@ = "PARAM_OUT"
   *OUT_@_LOWER:Param_Names_@_len = Encode_@_Param_Encodings_@_@_REPLACE_ALL(-/_):Param_Types_@
      ((void *)OUT_@_LOWER:Param_Names_@,
@@IF@@ @_Param_Encodings_@ = NATIVE
       sizeof (asn1Scc@_REPLACE_ALL(-/_):Param_Types_@),
@@ELSIF@@ @_Param_Encodings_@ = UPER
       asn1Scc@_REPLACE_ALL(-/_):Param_Types_@_REQUIRED_BYTES_FOR_ENCODING,
@@ELSIF@@ @_Param_Encodings_@ = ACN
       asn1Scc@_REPLACE_ALL(-/_):Param_Types_@_REQUIRED_BYTES_FOR_ACN_ENCODING,
@@END_IF@@
       &OUT_@_UPPER:Param_Names_@);
@@END_IF@@
@@END_TABLE@@
}
@@ELSE@@   @@-- parameterless functions
void @_LOWER:Parent_Function_@_@_Name_@()
{
   //  Directly call user code, no parameters to pass
   extern void @_LOWER:Parent_Function_@_PI_@_Name_@(void);
   @_LOWER:Parent_Function_@_PI_@_Name_@();
   // puts ("@_LOWER:Parent_Function_@_@_LOWER:Name_@ called");
}
@@END_IF@@
