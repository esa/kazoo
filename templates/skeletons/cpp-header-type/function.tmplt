@@-- The following tags are available in this template:
@@--
@@-- @_Name_@                : The name of the function
@@-- @_Language_@            : The implementation language
@@-- @_List_Of_PIs_@         : List of all Provided Interfaces (just names)
@@-- @_List_Of_RIs_@         : List of all Required Interfaces (just names)
@@-- @_List_Of_Sync_PIs@     : List of synchronous Provided Interfaces
@@-- @_List_Of_Sync_RIs@     : List of synchronous Required Interfaces
@@-- @_List_Of_ASync_PIs@    : List of asynchronous Provided Interfaces
@@-- @_List_Of_ASync_RIs@    : List of asynchronous Required Interfaces
@@-- @_ASN1_Modules_@        : List of ASN.1 Modules names
@@-- @_ASN1_Files_@          : List of ASN.1 Files with path
@@-- @_Timers_@              : List of timers (just names)
@@-- @_Has_Context_@         : Flag, True if there are context parameters
@@-- @_CP_Names_@            : List of Context Parameter names
@@-- @_CP_Types_@            : List of Context Parameter types
@@-- @_Provided_Interfaces_@ : From template: Provided interfaces with params
@@-- @_Required_Interfaces_@ : From template: Required interfaces with params
@@-- @_Property_Names_@      : List of User-defined properties (names)
@@-- @_Property_Values_@     : List of User-defined properties (values)
@@-- @_Is_Type_@             : Flag, True if function is a component type
@@-- @_Instance_Of_@         : Optional name of component type
/* C++ Function Type
 * Header file for function @_Name_@ in @_Language_@ language
 * Generated by TASTE on @_NOW_@
 * Context Parameters present : @_YES_NO:Has_Context_@
 * Provided interfaces : @_List_Of_PIs_@
 * Required interfaces : @_List_Of_RIs_@
 * User-defined properties for this function:
@@TABLE@@
  *  |_ @_Property_Names_@ = @_Property_Values_@
@@END_TABLE@@
 * DO NOT EDIT THIS FILE, IT WILL BE OVERWRITTEN DURING THE BUILD
 */

#pragma once

#include "dataview-uniq.h"
#include "@_LOWER:Name_@_state.h"

class @_LOWER:Name_@ {
   // These are the required interfaces you can call from application code:
   @_Required_Interfaces_@
@@TABLE@@
   typedef void (*SET_@_Timers_@_ptr)(asn1SccT_Uint32 *);
   typedef void (*RESET_@_Timers_@_ptr)(void);
   SET_@_Timers_@_ptr   SET_@_Timers_@;
   RESET_@_Timers_@_ptr RESET_@_Timers_@;
@@END_TABLE@@

   // the ctxt member allows you to define your per-instance global data
   @_LOWER:Name_@_state ctxt;

public:
@@IF@@ @_List_Of_RIs'Length_@ = 0 and @_Timers'Length_@ = 0
   @_LOWER:Name_@() {}
@@ELSE@@
@@INLINE(   )()()@@
   @_LOWER:Name_@
@@INLINE(\()(, )(\):)@@
@@TABLE@@
      RI_@_List_Of_RIs_@_ptr RI_@_List_Of_RIs_@_arg
@@END_TABLE@@
@@TABLE@@
      SET_@_Timers_@_ptr SET_@_Timers_@_arg, RESET_@_Timers_@_ptr RESET_@_Timers_@_arg
@@END_TABLE@@
@@END_INLINE@@
@@END_INLINE@@
@@INLINE(      )(, )( {})@@
@@TABLE@@
RI_@_List_Of_RIs_@(RI_@_List_Of_RIs_@_arg)
@@END_TABLE@@
@@TABLE@@
SET_@_Timers_@(SET_@_Timers_@_arg), RESET_@_Timers_@(RESET_@_Timers_@_arg)
@@END_TABLE@@
@@END_INLINE@@
@@END_IF@@  @@-- RI or Timers
   void startup();
   /* Provided interfaces */
   @_Provided_Interfaces'Indent_@
};
