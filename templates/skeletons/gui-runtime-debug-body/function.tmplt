@@-- The following tags are available in this template:
@@--
@@-- @_Name_@                : The name of the function
@@-- @_Language_@            : The implementation language
@@-- @_List_Of_PIs_@         : List of all Provided Interfaces (just names)
@@-- @_List_Of_RIs_@         : List of all Required Interfaces (just names)
@@-- @_List_Of_Sync_PIs@     : List of synchronous Provided Interfaces
@@-- @_List_Of_Sync_RIs@     : List of synchronous Required Interfaces
@@-- @_List_Of_ASync_PIs@    : List of asynchronous Provided Interfaces
@@-- @_List_Of_ASync_RIs@    : List of asynchronous Required Interfaces
@@-- @_ASN1_Modules_@        : List of ASN.1 Modules names
@@-- @_ASN1_Files_@          : List of ASN.1 Files with path
@@-- @_Timers_@              : List of timers (just names)
@@-- @_Has_Context_@         : Flag, True if there are context parameters
@@-- @_CP_Names_@            : List of Context Parameter names
@@-- @_CP_Types_@            : List of Context Parameter types
@@-- @_Provided_Interfaces_@ : From template: Provided interfaces with params
@@-- @_Required_Interfaces_@ : From template: Required interfaces with params
@@-- @_Property_Names_@      : List of User-defined properties (names)
@@-- @_Property_Values_@     : List of User-defined properties (values)
@@-- @_Is_Type_@             : Flag, True if function is a component type
@@-- @_Instance_Of_@         : Optional name of component type
#ifdef __unix__

#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>

#include "debug_messages.h"

// debug_printf is used for logging and error reporting

void debug_printf(DebugLevel level, const char *fmt, ...)
{
    static int bFirstTime = 1;
    static int bPrintsEnabled = 0;
    static char message[4096];

    if (bFirstTime) {
	bFirstTime = 0;
	bPrintsEnabled = (NULL != getenv("ASSERT_DEBUG"))?1:0;
    }
    if (level == LVL_ERROR)
	printf("%s\n", "***** ERROR just happened: *****");
    if (((level == LVL_INFO || level == LVL_WARN) && bPrintsEnabled) || 
	level == LVL_ERROR || 
	level == LVL_PANIC) 
    {
	va_list ap;
	va_start(ap, fmt);
	vsnprintf(message, sizeof message, fmt, ap);
	printf("%s", message);
	va_end(ap);
    }
    if (level == LVL_PANIC)
	exit(1);
}

#endif
