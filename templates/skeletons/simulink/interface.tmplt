@@-- The following tags are available in this template:
@@--
@@-- @_Name_@                : The name of the interface
@@-- @_Direction_@           : "PI" or "RI"
@@-- @_Kind_@                : The RCM Kind
@@-- @_Parent_Function_@     : The name of the function
@@-- @_Param_Names_@         : List of parameter names
@@-- @_Param_Types_@         :   |_ Corresponding parameter types
@@-- @_Param_Directions_@    :   |_ Corresponding direction
@@-- @_Param_Encodings_@     :   |_ Corresponding ASN.1 encoding
@@-- @_Period_@, @_WCET_@, @_Queue_Size_@ : Properties of the interface
@@-- @_IF_Property_Names_@, _Values_@ : User-defined properties (vector tag)
if (exist('@_Name_@') == 4),
   simulink('open');
   load_system('@_Name_@');
   open_system('@_Name_@');
     inportHan = find_system('Operate_lift','FindAll','on', 'SearchDepth', 1, 'BlockType','Inport');
     outportHan = find_system('Operate_lift','FindAll','on', 'SearchDepth', 1, 'BlockType','Outport');
     % ---------------------------------------------------------------------------------
     % start by removing the Bus Selectors / then lines / finally ports 
     % ---------------------------------------------------------------------------------
     % get the handles of all the lines connected to inports 
     for i=1:length(inportHan)
             inports_positions(i,:) = get_param(inportHan(i),'Position'); % remember Inport's position
             line_structsIn(i)=get_param(inportHan(i),'LineHandles'); % get the structures
             inLinesHan(i)=line_structsIn(i).Outport;        % get the line connected to the block's Outport
             if (inLinesHan(i) ~= -1) % if exists
                     dstBlock = get_param(inLinesHan(i),'DstBlockHandle'); % get the destination block's handle
                     if (strcmp(get_param(dstBlock,'BlockType'),'BusSelector'))
                             bussel_positions(i,:) = get_param(dstBlock,'Position'); % remember Bus Selector's position
                             blockLineStructs = get_param(dstBlock,'LineHandles'); % get the line connected structures
                             blockLineHandles = blockLineStructs.Outport; % get the line handlers connected to the bus's outports
                             for j=1:length(blockLineHandles)
                                     if (blockLineHandles(j) ~= -1)
                                             delete(blockLineHandles(j));
                                     end
                             end
                             delete_block(dstBlock); % delete it if it is a Bus Selector Block
                     end
                     delete(inLinesHan(i)); % delete the respective line
             end
             delete_block(inportHan(i)); % delete the outdated inport block
     end
     % now remove the outports
     for i=1:length(outportHan)
             outports_positions(i,:) = get_param(outportHan(i),'Position'); % remember Outport's position
             line_structsOut(i)=get_param(outportHan(i),'LineHandles'); % get the structures
             outLinesHan(i)=line_structsOut(i).Inport;       % get the line connected to the block's Inport
             if (outLinesHan(i) ~= -1) % if exists
                     srcBlock = get_param(outLinesHan(i),'SrcBlockHandle'); % get the source block's handle
                     if (strcmp(get_param(srcBlock,'BlockType'),'BusCreator'))
                             buscre_positions(i,:) = get_param(srcBlock,'Position'); % remember Bus Creator's position
                             blockLineStructs = get_param(srcBlock,'LineHandles'); % get the line connected structures
                             blockLineHandles = blockLineStructs.Inport; % get the line handlers connected to the bus's outports
                             for j=1:length(blockLineHandles)
                                     if (blockLineHandles(j) ~= -1)
                                             delete(blockLineHandles(j));
                                     end
                             end
                             delete_block(srcBlock); % delete it if it is a Bus Creator Block
                     end
                     delete(outLinesHan(i)); % delete the respective line
     end
             delete_block(outportHan(i)); % delete the outdated outport block
     end
else
     simulink('open');
     new_system('@_Name_@');
     open_system('@_Name_@');
end

@@TABLE@@
@@IF@@ @_Param_Directions_@ = PARAM_IN
add_block('simulink/Sources/In1', '@_Name_@/@_Param_Names_@');
@@-- Etc.
@@END_IF@@
@@END_TABLE@@

@@TABLE@@
@@IF@@ @_Param_Directions_@ = PARAM_OUT
@@END_IF@@
@@END_TABLE@@

@@-- Set the system parameters
set_param('@_Name_@','SaveOutput','off');
set_param('@_Name_@','SignalLogging','off');
set_param('@_Name_@','SaveTime','off')
set_param('@_Name_@','Solver','FixedStepDiscrete');
set_param('@_Name_@','SystemTargetFile','ert.tlc');
set_param('@_Name_@','TemplateMakefile','ert_default_tmf');
set_param('@_Name_@', 'PostCodeGenCommand', 'packNGo(buildInfo);');
set_param('@_Name_@','StrictBusMsg','ErrorLevel1')
save_system('@_Name_@');
close_system('@_Name_@');
